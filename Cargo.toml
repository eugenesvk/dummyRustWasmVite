[package]
name       	= "rust_wasm_vite_dummy"
version    	= "0.1.0"
description	= "Rust → WASM via Vite (dummy repo)"
authors    	= ["x"]
categories 	= ["wasm"]
readme     	= "ReadMe.md"
license    	= "MIT"
edition    	= "2021"

[workspace]
members = [ # share common dep resolution (Cargo.lock), output dir, various settings such as profiles
  "src/background",
  "src/options",
  "src/popup",
  "src/storage_web_ext",
]
default-members = [ # cargo build all members without having to pass --workspace
  "src/background",
  "src/options",
  "src/popup",
  "src/storage_web_ext",
]

[dependencies]
# wasm-bindgen          	= "0.2.81"	# wasm «» JS
wasm-bindgen            	= {version	= "0.2.82", features = ["serde-serialize"] }
js-sys                  	= "0.3.58"	# [wasm-bindgen] bindings to JS global APIs
web-extensions-sys      	= "0.2.0" 	# [wasm-bindgen] bindings to JS APIs for WebExtensions
wasm-bindgen-futures    	= "0.4.31"	# [wasm-bindgen] Rust Future «» JS Promise
serde-wasm-bindgen      	= "0.4.3" 	# [wasm-bindgen] alternative native integration of Serde
serde                   	= {version	="1.0.40",features=["derive"] }
dominator               	= "0.5.28"	# DOM lib (declarative + FRP signals)
console_error_panic_hook	= "0.1.7" 	# wasm panic message → console.error
futures-signals         	= "0.3.30"	#
futures                 	= {version	="0.3.21", features=["async-await"] }
once_cell               	= "1.13.0"	#
# gloo-events           	= "0.1.2" 	# web-sys event listeners → EventListener type (easier)
gloo-timers             	= {version	="0.2.4",features=["futures"]}
gloo-utils              	= "0.1.4" 	# wraps common web_sys features with a cleaner API
either                  	= "1.7"   	# enum Either with variants Left/Right

typed-builder	= "0.10.0"	# compile-time verified builder

# uuid       	= {version="1.1.1", features=["serde","v4","js"] }
# serde_json 	= "1.0.40"
# lazy_static	= "1.0.0"

[dependencies.web-sys]
version = "0.3.58"
features = [
  # "Blob",
  # "BlobPropertyBag",
  "console",
  # "EventTarget",
  # "DomException",
  # "File",
  # "FileList",
  # "FileReader",
  # "MediaQueryList",
  # "MediaQueryListEvent",
  # "Storage",
  # "Performance",
  # "Url",
  # "Window",
]

[patch.crates-io]
web-extensions-sys	= {git="https://github.com/web-extensions-rs/web-extensions-sys"}

[dev-dependencies]
wasm-bindgen-test	= "0.3.31"	# test Rust→wasm using wasm-bindgen via `cargo test --target wasm32-unknown-unknown --lib rust_wasm_vite_dummy` (for the lib) or `-p storage_web_ext` (for a given member crate)

[profile.release]
panic        	= 'abort'	# Do not perform backtrace for panic on release builds
codegen-units	= 1      	# Perform optimizations on all codegen units
opt-level    	= 'z'    	# Optimize for size 's' or 'z' "aggressively", 3 fast
lto          	= true   	# Enable link time optimization

[package.metadata.wasm-pack.profile.release]
wasm-opt = ["-Oz"]  # O4 fast, Oz/Os small

# [profile.dev]   	          	# dev profile, used for `cargo build`
# opt-level       	= 0       	# controls the `--opt-level` the compiler builds with. 0-1 is good for debugging. 2 is well-optimized. Max is 3.
# debug           	= true    	# include debug information (debug symbols). Equivalent to `-C debuginfo=2` compiler flag.
# rpath           	= false   	# controls whether compiler should set loader paths. If true, passes `-C rpath` flag to the compiler.
# lto             	= false   	# Link Time Optimization usually reduces size of binaries and static libraries. Increases compilation time. If true, passes `-C lto` flag to the compiler, and if a string is specified like 'thin' then `-C lto=thin` will be passed
# debug-assertions	= true    	# controls whether debug assertions are enabled (e.g. debug_assert!() and arithmetic overflow checks)
# codegen-units   	= 1       	# if > 1 enables parallel code generation which improves compile times, but prevents some optimizations. Passes `-C codegen-units`.
# panic           	= 'unwind'	# panic strategy (`-C panic=...`), can also be 'abort'
# incremental     	= false   	# [true] whether or not incremental compilation is enabled
# overflow-checks 	= true    	# use overflow checks for integer arithmetic Passes the `-C overflow-checks=...` flag to the compiler.
